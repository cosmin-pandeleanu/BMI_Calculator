AWSTemplateFormatVersion: "2010-09-09"
Resources:
    # DynamoDB
    DynamoDBTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions:
                -   AttributeName: "id"
                    AttributeType: "S"
                -   AttributeName: "firstName"
                    AttributeType: "S"
                -   AttributeName: "lastName"
                    AttributeType: "S"
            TableName: "PersonDetailsBMI"
            Tags:
                -   Key: "project"
                    Value: "CC"
            KeySchema:
                -   AttributeName: "id"
                    KeyType: "HASH"
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
            GlobalSecondaryIndexes: # Define the global secondary index
                -   IndexName: "FirstNameLastNameIndex"
                    KeySchema:
                        -   AttributeName: "firstName"
                            KeyType: "HASH"
                        -   AttributeName: "lastName"
                            KeyType: "RANGE"
                    Projection:
                        ProjectionType: "ALL"
                    ProvisionedThroughput:
                        ReadCapacityUnits: 1
                        WriteCapacityUnits: 1
    # AWS Lambda - Calculate BMI
    CalculateBMILambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "calculateBMI"
            Handler: "lambda_function.lambda_handler"
            Architectures:
                - "x86_64"
            Code:
                S3Bucket: "bucket-cloud-computing-bmi-calculator"  # Use the S3 bucket name created in the shell script
                S3Key: "calculateBMI.zip"
            MemorySize: 128
            Role: !GetAtt CalculateBMIRole.Arn # Reference the ARN of the role
            Runtime: "python3.12"
            Timeout: 3
            TracingConfig:
                Mode: "PassThrough"
            EphemeralStorage:
                Size: 512
            Tags:
                -   Key: "project"
                    Value: "CC"

    CalculateBMIRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service: "lambda.amazonaws.com"
                        Action: "sts:AssumeRole"
            Policies:
                -   PolicyName: "LambdaLogsPolicy"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -   Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                            -   Effect: "Allow"
                                Action:
                                    - "logs:CreateLogStream"
                                    - "logs:PutLogEvents"
                                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/calculateBMI:*"
                            -   Effect: "Allow"
                                Action:
                                    - "dynamodb:PutItem"
                                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PersonDetailsBMI"
            Tags:
                -   Key: "project"
                    Value: "CC"


    # AWS Lambda - Search BMI
    SearchBMILambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "searchBMI"
            Handler: "lambda_function.lambda_handler"
            Architectures:
                - "x86_64"
            Code:
                S3Bucket: "bucket-cloud-computing-bmi-calculator"  # Use the S3 bucket name created in the shell script
                S3Key: "searchPerson.zip"
            MemorySize: 128
            Role: !GetAtt SearchBMIRole.Arn  # Reference the ARN of the role for searchBMI
            Runtime: "python3.12"
            Timeout: 3
            TracingConfig:
                Mode: "PassThrough"
            EphemeralStorage:
                Size: 512
            Tags:
                -   Key: "project"
                    Value: "CC"

    SearchBMIRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service: "lambda.amazonaws.com"
                        Action: "sts:AssumeRole"
            Policies:
                -   PolicyName: "LambdaLogsPolicy"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -   Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                            -   Effect: "Allow"
                                Action:
                                    - "logs:CreateLogStream"
                                    - "logs:PutLogEvents"
                                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/searchBMI:*"
                            -   Effect: "Allow"
                                Action:
                                    - "dynamodb:Query"
                                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PersonDetailsBMI/index/FirstNameLastNameIndex"
            Tags:
                -   Key: "project"
                    Value: "CC"